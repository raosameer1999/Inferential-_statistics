# -*- coding: utf-8 -*-
"""Untitled83.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EV_97dDWb3A5yjUFDfqLGsVcJXI4hhwk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/purchase_data (1).csv")

data

data.info()

data["Stay_In_Current_City_Years"].unique()

data["Stay_In_Current_City_Years"] = data["Stay_In_Current_City_Years"].replace("4+","4")

data

data.info()

data["Stay_In_Current_City_Years"] = pd.to_numeric(data["Stay_In_Current_City_Years"],errors="coerce" )
# errors="coerce" : if there are any values in the column that cannot be converted to numeric, they will be replaced with NaN.

data

data.info()

data["City_Category"].unique()

data["Age"].unique()

data["Gender"].unique()

data["Product_ID"].unique()

data["Product_ID"].nunique()

data.isnull().sum()

data.dropna(inplace=True)

# data = data.dropna()

data.shape

data.info()

from sklearn.preprocessing import LabelEncoder

Le=LabelEncoder()

data["Product_ID"]=Le.fit_transform(data["Product_ID"])

data["Age"]  = Le.fit_transform(data["Age"])

data["Gender"] = Le.fit_transform(data["Gender"])
data["City_Category"] = Le.fit_transform(data["City_Category"])

data

data.info()

"""# Statistical Analysis

# -->Data collection
# -->preparing samples
# -->creating two hypothesis (null hypothesis,alternate hypothesis)
# -->applying the appropriate test(based on requirement or case)
# -->if p-value>0.05 accept null hypothesis
#   if p-value<0.05 Rejection of null hypothesis bold text

#**a. It was observed that the average purchase made by the Men of the age 18-25 was 10000. Is it still the same?**
"""

new_data=data[(data["Age"]==1) & (data["Gender"]==1)]

new_data

"""One- Sample T-Test

"""

sample=new_data.sample(1000,random_state=5)

sample

"""# null hypothesis: means will be equal to 10000
# alternate hypothesis : means will not be equal to 10000
"""

pop_mean=10000

from scipy.stats import ttest_1samp

sample["Purchase"].mean()

t_stats,p_value=ttest_1samp(sample["Purchase"],pop_mean)

print(t_stats,p_value)

"""As p value is less than 0.05 Hence we can neglect the null ***hypothesis***

#**b. It was observed that the percentage of women who spend more than 10000 was 35%. Is it still the same?** **bold text**
"""

# Z-test is used in case of proportion

data_new = data.loc[(data["Purchase"]>10000)]

data_new

counts=data_new["Gender"].value_counts()[0]

counts

# number of observation

nobs = len(data_new["Gender"])
nobs

(4321/21177)*100

p0=0.35

from statsmodels.stats.proportion import proportions_ztest

z_stat, p_value = proportions_ztest(counts,nobs,p0)

print(z_stat, p_value)

#null hypothesis - proportion is 35%.
#alternate hypothesis - proportion is not 35%.

""" Q-4)--**Is:** the percentage of men who have spent more than 10000 the same for the ages 18-25 and 26-35?**bold text** **italicized text**"""

#null hypothesis - Percentage of the men in the age groups is same
#alternate hypothesis - Percentage of the men in the age groups is not same

data_age1 = data.loc[(data["Age"]==1) & (data["Purchase"] >10000)]
data_age2 = data.loc[(data["Age"]==2) & (data["Purchase"] >10000)]

data_age1

data_age2

data_age1_sample = data_age1.sample(1000,random_state=0)
data_age2_sample = data_age2.sample(1000,random_state=0)

data_age1_sample

data_age2_sample

(data_age1_sample["Gender"]==1).sum()

(data_age2_sample["Gender"]==1).sum()

[(data_age1_sample["Gender"]==1).sum(),(data_age2_sample["Gender"]==1).sum()]

count = [(data_age1_sample["Gender"]==1).sum(),(data_age2_sample["Gender"]==1).sum()]

nobs = [(len(data_age1_sample)),(len(data_age2_sample))]

count

nobs

(804/1000)*100

(824/1000)*100

from statsmodels.stats.proportion import proportions_ztest

z_stats, p_value = proportions_ztest(count=count,nobs=nobs,value=0)

print(z_stats, p_value)

# Reject  null hypothesis
# percentage of men who have spent more than 10000 not same for the ages 18-25 and 26-35